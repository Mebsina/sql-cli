plugins {
    id 'java'
    id 'application'
    id 'base'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.diffplug.spotless' version '7.1.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'Gateway'
}

repositories {
    mavenCentral()
    maven {
        url "https://aws.oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        url "https://jitpack.io"
    }
}

ext {
    submodules = ['common', 'core', 'opensearch', 'ppl', 'sql', 'protocol']

    sharedDeps = [
        // will need to publish datasources submodule into the maven 
        // right now, will have to use it locally
        files('/Users/cnoramut/Documents/GitHub/sql/datasources/build/libs/datasources-3.1.0.0-SNAPSHOT.jar'),
        // OpenSearch
        'org.opensearch.client:opensearch-rest-high-level-client:2.19.0',
        'org.opensearch.client:opensearch-rest-client:2.19.0',
        'org.opensearch.client:opensearch-java:2.19.0',
        'org.apache.calcite:calcite-core:1.40.0',
        'com.facebook.presto:presto-matching:0.293',
        'org.antlr:antlr4-runtime:4.7.1',
        'org.apache.commons:commons-lang3:3.17.0',
        'org.reactivestreams:reactive-streams:1.0.4',
        'com.google.guava:guava:32.4.8-jre',
        // for OpenSearchRestClientImpl.java
        'org.projectlombok:lombok:1.18.38',
        // HTTP4
        'org.apache.httpcomponents:httpcore:4.4.16',
        'org.apache.httpcomponents:httpclient:4.5.14',
        // AWS SDK v2 
        'software.amazon.awssdk:sdk-core:2.31.63',
        'software.amazon.awssdk:auth:2.31.63',
        'software.amazon.awssdk:regions:2.31.63',
        'software.amazon.awssdk:apache-client:2.31.63',
        'software.amazon.awssdk:sts:2.31.63',
        'software.amazon.awssdk:aws-core:2.31.63',
        // AWS Interceptor
        // 'io.github.acm19:aws-request-signing-apache-interceptor:3.0.0',
        // Logging 
        'org.apache.logging.log4j:log4j-core:2.25.0',
        'org.apache.logging.log4j:log4j-api:2.25.0',
        // Apache Commons Configuration for YAML file parsing
        'org.apache.commons:commons-configuration2:2.12.0',
        'commons-beanutils:commons-beanutils:1.11.0',
        'org.yaml:snakeyaml:2.2',
        // JSON  
        'org.json:json:20250517',
        'com.google.code.gson:gson:2.13.1',
        // Guice, dependency injection
        'com.google.inject:guice:7.0.0',
        // Py4J
        'net.sf.py4j:py4j:0.10.9.9'
    ]
}

configurations {
    dev
    sharedDependency

    implementation {
        extendsFrom sharedDependency
    }
}

def getOpenSearchClientVersion(String version) {
    def parts = version.split("\\.")
    // 2.19.1 -> 2.19.0
    if (parts.length >= 3) {
        return "${parts[0]}.${parts[1]}.0"
    }
    return version
}

dependencies {

    sharedDeps.each { d ->
        sharedDependency d
    }

    // Add Lombok as an annotation processor
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
}

jar {
    archiveBaseName.set("opensearchsql")
}

compileJava {
    options.compilerArgs += [
        '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
        '--add-opens=java.base/java.io=ALL-UNNAMED'
    ]
}

applicationDefaultJvmArgs = [
    '--add-opens=java.base/sun.nio.ch=ALL-UNNAMED',
    '--add-opens=java.base/java.io=ALL-UNNAMED',
    '--add-opens=java.base/sun.misc=ALL-UNNAMED'
]

spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**', 'src/main/gen/**'
        }
        importOrder()
        // licenseHeader("/*\n" +
        //         " * Copyright OpenSearch Contributors\n" +
        //         " * SPDX-License-Identifier: Apache-2.0\n" +
        //         " */\n\n")
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        googleJavaFormat('1.17.0').reflowLongStrings().groupArtifact('com.google.googlejavaformat:google-java-format')
    }
}

shadowJar {
    archiveBaseName.set("opensearchsql")
    
    manifest {
        attributes 'Main-Class': 'Gateway'
    }

    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.EC'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/MANIFEST.MF'

    mergeServiceFiles()
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    zip64 = true
}

def createShadowJarTask(String taskName, String versionLabel, Configuration config) {
    tasks.register(taskName, com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
        archiveBaseName.set("opensearchsql-v${versionLabel}")
        configurations = [config]
        from(sourceSets.main.output)

        manifest {
            attributes 'Main-Class': 'Gateway'
        }

        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
        exclude 'META-INF/*.EC'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/MANIFEST.MF'

        mergeServiceFiles()
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        zip64 = true
    }
}

ext.createVersionConfigurations = { String version ->
    def configName = "v${version.replace('.', '_')}"
    def runtimeConfigName = "${configName}_Runtime"

    if (!configurations.findByName(configName)) {
        configurations.create(configName)
        configurations.create(runtimeConfigName) {
            extendsFrom configurations.sharedDependency, configurations[configName]
        }

        // Add unified-query dependencies
        project.ext.submodules.each { name ->
            dependencies.add(configName, "org.opensearch.query:unified-query-${name}:${version}-SNAPSHOT")
        }

        // // Add OpenSearch client dependencies with appropriate version
        // def clientVersion = getOpenSearchClientVersion(version)

        // def opensearchClientDeps = [
        //     'opensearch-rest-high-level-client',
        //     'opensearch-rest-client',
        //     'opensearch-java'
        // ]
        
        // opensearchClientDeps.each { dep ->
        //     dependencies.add(configName, "org.opensearch.client:${dep}:${clientVersion}")
        // }
        
        // println "Using OpenSearch client version ${clientVersion} for version ${version}"

        createShadowJarTask(configName, version, configurations[runtimeConfigName])

        println "Created configuration and task for version ${version}"
    }

    return configName
}

// Create default v3_1_0_0 configuration at build time
def defaultConfigName = createVersionConfigurations("2.19.0.0")
configurations.implementation.extendsFrom = [configurations.sharedDependency, configurations[defaultConfigName]] as Set

tasks.register('setImplementationVersion') {
    doLast {
        def version = project.hasProperty('version') ? project.getProperty('version') : '2.19.0.0'
        def configName = project.ext.createVersionConfigurations(version)

        configurations.implementation.extendsFrom = [configurations.sharedDependency, configurations[configName]] as Set

        println "Set implementation to use version ${version}"
    }
}

// Use Gradle's task rules for dynamic task creation
tasks.addRule("Pattern: v<version>: Creates a task for the specified version") { String taskName ->
    if (taskName.startsWith("v") && taskName.count("_") >= 3) {
        def version = taskName.substring(1).replace('_', '.')
        def configName = project.ext.createVersionConfigurations(version)

        configurations.implementation.extendsFrom = [configurations.sharedDependency, configurations[configName]] as Set

        println "Set implementation to use version ${version}"
    }
}
